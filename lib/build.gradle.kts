import kotlin.math.sign

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.1.1/userguide/building_java_projects.html
 */

plugins {
    kotlin("jvm") version "1.4.31"
    kotlin("kapt") version "1.5.21"
    id("org.jetbrains.dokka") version "1.4.20"

    `java-library`
    `maven-publish`
    signing
}

group = "xyz.katiedotson.gqlk"
version = "0.1.0"

val dokkaOutputDir = "$buildDir/dokka"

tasks.dokkaHtml {
    outputDirectory.set(file(dokkaOutputDir))
}

val deleteDokkaOutputDir by tasks.register<Delete>("deleteDokkaOutputDirectory") {
    delete(dokkaOutputDir)
}

val javadocJar = tasks.register<Jar>("javadocJar") {
    dependsOn(deleteDokkaOutputDir, tasks.dokkaHtml)
    archiveClassifier.set("javadoc")
    from(dokkaOutputDir)
}

java {
    withJavadocJar()
    withSourcesJar()
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Align versions of all Kotlin components
    implementation(platform("org.jetbrains.kotlin:kotlin-bom"))

    // Use the Kotlin JDK 8 standard library.
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")

    // Junit
    testImplementation(platform("org.junit:junit-bom:5.7.2"))
    testImplementation("org.junit.jupiter:junit-jupiter")
    testImplementation("org.junit.jupiter:junit-jupiter-api")
    testImplementation("org.junit.platform:junit-platform-runner:1.7.2")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
    testImplementation("org.junit.platform:junit-platform-suite-api:1.7.2")
    testImplementation("org.junit.platform:junit-platform-runner:1.2.0")

    // Gson
    implementation("com.google.code.gson:gson:2.8.0")

    // OKHttp3
    testImplementation(platform("com.squareup.okhttp3:okhttp-bom:4.9.0"))
    testImplementation("com.squareup.okhttp3:okhttp")
    testImplementation("com.squareup.okhttp3:logging-interceptor")

    // Retrofit
    testImplementation("com.squareup.retrofit2:retrofit:2.6.4")

    // Coroutines
    testImplementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.1.0")

    // Reflection
    implementation("org.jetbrains.kotlin:kotlin-reflect:1.5.21")

    // Moshi
    kaptTest("com.squareup.moshi:moshi-kotlin-codegen:1.12.0")
    testImplementation("com.squareup.moshi:moshi-kotlin:1.12.0")
    testImplementation("com.squareup.retrofit2:converter-moshi:2.6.4")

    // Gradle
    api("org.apache.commons:commons-math3:3.6.1")

}

tasks.test {
    useJUnitPlatform {
        includeEngines("junit-jupiter")
    }
}

tasks.named<Test>("test") {
    useJUnitPlatform()
}

publishing {
    publishing {
        repositories {
            maven {
                name = "OSSRH"
                url = uri("https://oss.sonatype.org/service/local/staging/deploy/maven2/")
                credentials {
                    username = project.findProperty("mvn.user") as String?
                    password = project.findProperty("mvn.key") as String?
                }
            }
        }
        publications {
            withType<MavenPublication> {
                pom {
                    name.set("GqlK")
                    description.set("A concise toolkit for generating GraphQl requests in Kotlin")
                    licenses {
                        license {
                            name.set("The Apache License, Version 2.0")
                            url.set("http://www.apache.org/licenses/LICENSE-2.0.txt")
                        }
                    }
                    url.set("http://katiedotson.xyz")
                    issueManagement {
                        system.set("Github")
                        url.set("https://github.com/katiedotson/gqlk/issues")
                    }
                    scm {
                        connection.set("https://github.com/katiedotson/gqlk.git")
                        url.set("https://github.com/katiedotson/gqlk")
                    }
                    developers {
                        developer {
                            name.set("Katie Dotson")
                            email.set("katie@katiedotson.xyz")
                        }
                    }
                }
            }
        }
    }
}
